Q1:
class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& cand, int target) {
        sort(cand.begin(), cand.end());
        vector<vector<int>> res;
        vector<int> path;
        dfs(cand, 0, target, path, res);
        return res;
    }
    
    void dfs(vector<int>& cand, int cur, int target, vector<int>& path, vector<vector<int>>& res) {
        if (target == 0) {
            res.push_back(path);
            return;
        }
        if (target < 0) return;
        
        for (int i = cur; i < cand.size(); i++) {
            if (i > cur && cand[i] == cand[i - 1]) continue; // Skip duplicates
            path.push_back(cand[i]);
            dfs(cand, i + 1, target - cand[i], path, res);
            path.pop_back(); // Backtrack
        }
    }
};

Q2:
class Solution {
public:
    vector<vector<int>> findFarmland(vector<vector<int>>& land) {
        int m = land.size();
        int n = land[0].size();
        vector<vector<int>> result;

        function<void(int, int, int&, int&)> dfs = [&](int r, int c, int& bottomRow, int& bottomCol) {
            if (r < 0 || r >= m || c < 0 || c >= n || land[r][c] != 1)
                return;

            land[r][c] = -1;

            bottomRow = max(bottomRow, r);
            bottomCol = max(bottomCol, c);

            dfs(r + 1, c, bottomRow, bottomCol); 
            dfs(r, c + 1, bottomRow, bottomCol); 
        };

        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (land[i][j] == 1) {
                    int bottomRow = i;
                    int bottomCol = j;
                    dfs(i, j, bottomRow, bottomCol);
                    result.push_back({i, j, bottomRow, bottomCol});
                }
            }
        }

        return result;
    }
};

