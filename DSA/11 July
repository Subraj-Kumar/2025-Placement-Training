Q1:
class Solution {
public:
    vector<vector<string>> result;

    vector<vector<string>> partition(string s) {
        vector<string> path;
        backtrack(s, 0, path);
        return result;
    }

private:
    void backtrack(string& s, int start, vector<string>& path) {
        if (start == s.size()) {
            result.push_back(path);
            return;
        }

        for (int end = start; end < s.size(); ++end) {
            if (isPalindrome(s, start, end)) {
                path.push_back(s.substr(start, end - start + 1));  // choose
                backtrack(s, end + 1, path);                       // explore
                path.pop_back();                                   // un-choose (backtrack)
            }
        }
    }

    bool isPalindrome(const string& s, int left, int right) {
        while (left < right) {
            if (s[left++] != s[right--])
                return false;
        }
        return true;
    }
};

Q2:
class Solution {
public:
    int minimumUnfairness = INT_MAX;

    int distributeCookies(vector<int>& cookies, int k) {
        vector<int> children(k, 0);
        backtrack(cookies, 0, children, k);
        return minimumUnfairness;
    }

private:
    void backtrack(vector<int>& cookies, int index, vector<int>& children, int k) {
        if (index == cookies.size()) {
            int currentMax = *max_element(children.begin(), children.end());
            minimumUnfairness = min(minimumUnfairness, currentMax);
            return;
        }

        for (int i = 0; i < k; ++i) {
            // Assign current cookie bag to child i
            children[i] += cookies[index];

            // Prune: don't go further if already worse than best
            if (children[i] < minimumUnfairness)
                backtrack(cookies, index + 1, children, k);

            children[i] -= cookies[index]; // Backtrack

            // Optimization: if this child had 0 before, don't try assigning to other empty children
            if (children[i] == 0) break;
        }
    }
};

Q3:
class Solution {
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> solutions;
        vector<string> board(n, string(n, '.')); // Initial empty board
        unordered_set<int> cols, diag1, diag2;   // Track attacked columns and diagonals
        backtrack(0, n, board, cols, diag1, diag2, solutions);
        return solutions;
    }

private:
    void backtrack(int row, int n,
                   vector<string>& board,
                   unordered_set<int>& cols,
                   unordered_set<int>& diag1,
                   unordered_set<int>& diag2,
                   vector<vector<string>>& solutions) {

        if (row == n) {
            solutions.push_back(board); // Found valid placement
            return;
        }

        for (int col = 0; col < n; ++col) {
            if (cols.count(col) || diag1.count(row - col) || diag2.count(row + col))
                continue; // Skip if under attack

            // Place queen
            board[row][col] = 'Q';
            cols.insert(col);
            diag1.insert(row - col);
            diag2.insert(row + col);

            // Explore further
            backtrack(row + 1, n, board, cols, diag1, diag2, solutions);

            // Backtrack
            board[row][col] = '.';
            cols.erase(col);
            diag1.erase(row - col);
            diag2.erase(row + col);
        }
    }
};
