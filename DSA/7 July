Q1:
class Solution {
public:
    vector<string> letterCombinations(string digits) {
        if (digits.empty()) return {};

        vector<string> res;
        string curr;

        vector<string> pad = {
            "", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"
        };

        function<void(int)> dfs = [&](int i) {
            if (i == digits.size()) {
                res.push_back(curr);
                return;
            }

            for (char c : pad[digits[i] - '0']) {
                curr.push_back(c);
                dfs(i + 1);
                curr.pop_back();
            }
        };

        dfs(0);
        return res;
    }
};



Q2:
class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> res;
        vector<int> curr;

        function<void(int, int)> backtrack = [&](int i, int sum) {
            if (sum == target) {
                res.push_back(curr);
                return;
            }
            if (i == candidates.size() || sum > target) return;

            curr.push_back(candidates[i]);
            backtrack(i, sum + candidates[i]);
            curr.pop_back();

            backtrack(i + 1, sum);
        };

        backtrack(0, 0);
        return res;
    }
};

Q3:
class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> curr;
        vector<bool> vis(nums.size(), false);

        function<void()> dfs = [&]() {
            if (curr.size() == nums.size()) {
                res.push_back(curr);
                return;
            }

            for (int i = 0; i < nums.size(); ++i) {
                if (vis[i]) continue;
                vis[i] = true;
                curr.push_back(nums[i]);
                dfs();
                curr.pop_back();
                vis[i] = false;
            }
        };

        dfs();
        return res;
    }
};
