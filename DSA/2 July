Q1:
class MyStack {
private:
    queue<int> q1, q2;

public:
    MyStack() {
        // Constructor
    }

    void push(int x) {
        q1.push(x);
    }

    int pop() {
        while (q1.size() > 1) {
            q2.push(q1.front());
            q1.pop();
        }
        int topElement = q1.front();
        q1.pop();
        swap(q1, q2);
        return topElement;
    }

    int top() {
        while (q1.size() > 1) {
            q2.push(q1.front());
            q1.pop();
        }
        int topElement = q1.front();
        q2.push(topElement);
        q1.pop();
        swap(q1, q2);
        return topElement;
    }

    bool empty() {
        return q1.empty();
    }
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack* obj = new MyStack();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->top();
 * bool param_4 = obj->empty();
 */

 Q2:
 class MyQueue {
private:
    stack<int> stack_in, stack_out;
    void transferIfNeeded() {
        if (stack_out.empty()) {
            while (!stack_in.empty()) {
                stack_out.push(stack_in.top());
                stack_in.pop();
            }
        }
    }

public:
    MyQueue() {

    }

    void push(int x) {
        stack_in.push(x);
    }

    int pop() {
        transferIfNeeded();
        int front = stack_out.top();
        stack_out.pop();
        return front;
    }

    int peek() {
        transferIfNeeded();
        return stack_out.top();
    }

    bool empty() {
        return stack_in.empty() && stack_out.empty();
    }
};
/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */

Q3:
class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        stack<int> stk;

        for (string& token : tokens) {
            if (token == "+" || token == "-" || token == "*" || token == "/") {
                int num2 = stk.top(); stk.pop();
                int num1 = stk.top(); stk.pop();

                if (token == "+") stk.push(num1 + num2);
                else if (token == "-") stk.push(num1 - num2);
                else if (token == "*") stk.push(num1 * num2);
                else stk.push(num1 / num2); // integer division truncates toward 0
            } 
            else {
                stk.push(stoi(token));
            }
        }

        return stk.top();
    }
};
