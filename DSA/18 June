Question 1: Two Sum
Code:

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> output;
        for(int i=0;i<nums.size();i++){
            for(int j=i+1;j<nums.size();j++){
                if (nums[i]+nums[j]==target){
                    output.push_back(i);
                    output.push_back(j);
                    return output;
                }
            }
        }
        return output;
    }
};

*************************************************************************

Question 2: Alone in couple
Code:

class Solution {
  public:
    int findSingle(vector<int> &arr) {
        int maxm = 0;
        for (int i = 0; i < arr.size(); i++) {
            if (arr[i] > maxm) {
                maxm = arr[i];
            }
        }
        int p = maxm + 1;
        vector<int> freq(p, 0);
        for (int i = 0; i < arr.size(); i++) {
            freq[arr[i]]++;
        }
        for (int i = 0; i < p; i++) {
            if (freq[i] == 1 || freq[i]%2==1) {
                return i;
            }
        }
        return -1; // No unique element found
    }
};

***********************************************************************

Question 3: Best time to buy and sell stock
Code:

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int maxPro = 0;
        int n = prices.size();
        int minPrice = INT_MAX;
        for (int i = 0; i < prices.size(); i++) {
            minPrice = min(minPrice, prices[i]);
            maxPro = max(maxPro, prices[i] - minPrice);
        }
        return maxPro;
    }
};

***************************************************************************

Question 4: Sort Colours
Code:

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int low = 0, mid = 0, high = nums.size() - 1;
        while (mid <= high) {
            if (nums[mid] == 0) {
                swap(nums[low], nums[mid]);
                low++;
                mid++;
            }
            else if (nums[mid] == 1) {
                mid++;
            }
            else {
                swap(nums[mid], nums[high]);
                high--;
            }
        }
    }
};

*************************************   END ****************************************
